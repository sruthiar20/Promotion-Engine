meta {
  name: missing_both_product_and_category_id_validation
  type: http
  seq: 2
}

get {
  url: http://localhost:8080/admin/promotions/searchById?status=active
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

assert {
  res.status: eq 400
}

tests {
  test("2.1 Should reject promotion with neither product-id nor category-id", function() {
    expect(res.status).to.equal(400,
      "Expected 400 Bad Request status when neither product-id nor category-id is provided");
  });

  test("2.2 Should return appropriate error message and field", function() {
    expect(res.body.type).to.equal("validation_error",
      "Expected validation_error type");
    
    // Check for error detail with correct field name
    expect(res.body.details).to.be.an('array');
    expect(res.body.details).to.have.length(1);
    expect(res.body.details[0].message).to.include("Either product_id or category_id must be provided",
      "Expected error message about required fields");
  });

  test("2.3 Should validate response headers", function() {
    expect(res.headers["content-type"]).to.match(/application\/json/,
      "Expected JSON content type in response");
  });

  test("2.4 Should have proper error response structure", function() {
    expect(res.body).to.have.property('type');
    expect(res.body).to.have.property('message');
    expect(res.body).to.have.property('details');
    expect(res.body.details).to.be.an('array');
    expect(res.body.details[0]).to.have.property('field');
    expect(res.body.details[0]).to.have.property('message');
  });
} 