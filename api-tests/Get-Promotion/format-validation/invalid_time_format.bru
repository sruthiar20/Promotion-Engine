meta {
  name: invalid_time_format_validation
  type: http
  seq: 2
}

get {
  url: http://localhost:8080/admin/promotions/searchById?status=active&product-id=SKU-PRO-001&starts_at={{start_date}}&ends_at={{end_date}}
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

script:pre-request {
  // Set start date with invalid time format (am/pm instead of 24h)
  const start_date = new Date(Date.now() + 24 * 60 * 60 * 1000);
  // Format as ISO but replace the time part with invalid format
  let start_iso = start_date.toISOString();
  start_iso = start_iso.replace(/\d{2}:\d{2}:\d{2}/, "01:30:00 PM");
  bru.setVar("start_date", start_iso);
  
  // Set end date with valid ISO format for comparison
  const end_date = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
  bru.setVar("end_date", end_date.toISOString());
}

assert {
  res.status: eq 400
}

tests {
  test("2.1 Should reject promotion with invalid time format", function() {
    expect(res.status).to.equal(400,
      "Expected 400 Bad Request status for invalid time format");
  });

  test("2.2 Should return appropriate error message and field", function() {
    expect(res.body.type).to.equal("validation_error",
      "Expected validation_error type");
    
    // Check for error details with correct field names
    expect(res.body.details).to.be.an('array');
    expect(res.body.details.length).to.be.at.least(1);
    
    // Find the error for starts_at
    const startsAtError = res.body.details.find(detail => detail.field === "starts_at");
    expect(startsAtError).to.exist;
    expect(startsAtError.message).to.include("Invalid time format",
      "Expected error message about invalid time format");
  });

  test("2.3 Should validate response headers", function() {
    expect(res.headers["content-type"]).to.match(/application\/json/,
      "Expected JSON content type in response");
  });

  test("2.4 Should have proper error response structure", function() {
    expect(res.body).to.have.property('type');
    expect(res.body).to.have.property('message');
    expect(res.body).to.have.property('details');
    expect(res.body.details).to.be.an('array');
  });
} 