meta {
  name: end_date_before_start_date_validation
  type: http
  seq: 1
}

get {
  url: http://localhost:8080/admin/promotions/searchById
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "status": "active",
    "product-id": "SKU-PRO-001",
    "starts_at": "{{start_date}}",
    "ends_at": "{{end_date}}"
  }
}

script:pre-request {
  // Set start date to 30 days from now (future date)
  const start_date = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
  bru.setVar("start_date", start_date.toISOString());
  
  // Set end date to 15 days from now (before start date but after today)
  const end_date = new Date(Date.now() + 15 * 24 * 60 * 60 * 1000);
  bru.setVar("end_date", end_date.toISOString());
}

assert {
  res.status: eq 400
}

tests {
  test("3.1 Should reject promotion with end date before start date", function() {
    expect(res.status).to.equal(400,
      "Expected 400 Bad Request status for end date before start date");
  });

  test("3.2 Should return appropriate error message and field", function() {
    expect(res.body.type).to.equal("validation_error",
      "Expected validation_error type");
    
    // Check for single error detail with correct field name
    expect(res.body.details).to.be.an('array');
    expect(res.body.details).to.have.length(1);
    expect(res.body.details[0].field).to.equal("ends_at",
      "Expected field name to be ends_at");
    expect(res.body.details[0].message).to.equal("End date must be after start date",
      "Expected error message about end date being after start date");
  });

  test("3.3 Should validate response headers", function() {
    expect(res.headers["content-type"]).to.match(/application\/json/,
      "Expected JSON content type in response");
  });

  test("3.4 Should have proper error response structure", function() {
    expect(res.body).to.have.property('type');
    expect(res.body).to.have.property('message');
    expect(res.body).to.have.property('details');
    expect(res.body.details).to.be.an('array');
  });

  test("3.5 Should validate date values in request", function() {
    const start_date = bru.getVar("start_date");
    const end_date = bru.getVar("end_date");
    const start_date_obj = new Date(start_date);
    const end_date_obj = new Date(end_date);
    
    expect(end_date_obj.getTime()).to.be.lessThan(start_date_obj.getTime(),
      "End date should be before start date in this test scenario");
  });

  test("3.6 Should validate both dates are in the future", function() {
    const start_date = bru.getVar("start_date");
    const end_date = bru.getVar("end_date");
    const start_date_obj = new Date(start_date);
    const end_date_obj = new Date(end_date);
    const now = new Date();
    
    expect(start_date_obj.getTime()).to.be.greaterThan(now.getTime(),
      "Start date should be in the future");
    expect(end_date_obj.getTime()).to.be.greaterThan(now.getTime(),
      "End date should be in the future (but before start date)");
  });
}