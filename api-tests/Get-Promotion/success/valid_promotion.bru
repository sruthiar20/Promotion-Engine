meta {
  name: valid_promotion_success
  type: http
  seq: 1
}

get {
  url: http://localhost:8080/admin/promotions/searchById
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  Accept: application/json
}

body:json {
  {
    "status": "active",
    "product-id": "SKU-PRO-001",
    "starts_at": "{{start_date}}",
    "ends_at": "{{end_date}}"
  }
}

script:pre-request {
  // Set start date to match the promotion in database (2026-07-09)
  bru.setVar("start_date", "2026-07-09T00:00:00Z");
  
  // Set end date to match the promotion in database (2026-08-31)
  bru.setVar("end_date", "2026-08-31T23:59:59Z");
}

assert {
  res.status: eq 200
}

tests {
  test("1.1 Should successfully retrieve promotion with valid parameters", function() {
    expect(res.status).to.equal(200,
      "Expected 200 OK status for valid promotion");
  });

  test("1.2 Should validate response headers", function() {
    expect(res.headers["content-type"]).to.match(/application\/json/,
      "Expected JSON content type in response");
  });

  test("1.3 Should have proper response structure", function() {
    expect(res.body).to.have.property('id');
    expect(res.body).to.have.property('code');
    expect(res.body).to.have.property('type');
    expect(res.body).to.have.property('value');
    expect(res.body).to.have.property('value_type');
    expect(res.body).to.have.property('starts_at');
    expect(res.body).to.have.property('ends_at');
    expect(res.body).to.have.property('status');
    expect(res.body).to.have.property('conditions').that.is.an('array');
  });

  test("1.4 Should have correct promotion status", function() {
    expect(res.body.status).to.equal("active",
      "Expected promotion status to be active");
  });

  test("1.5 Should validate date values are in correct format", function() {
    const starts_at = new Date(res.body.starts_at);
    const ends_at = new Date(res.body.ends_at);
    
    expect(isNaN(starts_at.getTime())).to.be.false,
      "starts_at should be a valid date";
    expect(isNaN(ends_at.getTime())).to.be.false,
      "ends_at should be a valid date";
    expect(ends_at.getTime()).to.be.greaterThan(starts_at.getTime(),
      "End date should be after start date");
  });

  test("1.6 Should validate product conditions", function() {
    // Check that the conditions array contains a product condition
    const productCondition = res.body.conditions.find(cond => cond.type === "product");
    expect(productCondition).to.exist;
    expect(productCondition.value).to.include("SKU-PRO-001",
      "Expected product condition to include the requested product ID");
  });
} 